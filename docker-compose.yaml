version: '3.8'

services:
  airflow_postgres:
    image: postgres:14
    container_name: airflow_db
    networks:
      - elt_network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-airflow:
    image: apache/airflow:2.7.1
    container_name: airflow_init
    depends_on:
      airflow_postgres:
        condition: service_healthy
    networks:
      - elt_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow
    command: >
      bash -c "airflow db init && 
               airflow users create --username airflow --password password --firstname Admin --lastname User --role Admin --email admin@example.com || true"

  webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_webserver
    user: root
    depends_on:
      airflow_postgres:
        condition: service_healthy
      init-airflow:
        condition: service_completed_successfully
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./elt:/opt/airflow/elt
      - ./dbt:/opt/airflow/dbt
      - ./logs:/opt/airflow/logs
      - dbt_config:/root/.dbt  # Use named volume instead of host mount
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME=${AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD=${AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_INPUT_PREFIX=${S3_INPUT_PREFIX}
      - S3_ARCHIVE_PREFIX=${S3_ARCHIVE_PREFIX}
      - AWS_REGION=${AWS_REGION}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DBT_PROFILES_DIR=/root/.dbt
    ports:
      - "8088:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_scheduler
    user: root
    depends_on:
      airflow_postgres:
        condition: service_healthy
      webserver:
        condition: service_started
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./elt:/opt/airflow/elt
      - ./dbt:/opt/airflow/dbt
      - ./logs:/opt/airflow/logs
      - dbt_config:/root/.dbt  # Use named volume instead of host mount
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_INPUT_PREFIX=${S3_INPUT_PREFIX}
      - S3_ARCHIVE_PREFIX=${S3_ARCHIVE_PREFIX}
      - AWS_REGION=${AWS_REGION}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DBT_PROFILES_DIR=/root/.dbt
    command: scheduler
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical_records_api
    networks:
      - elt_network
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    restart: unless-stopped

networks:
  elt_network:
    driver: bridge

volumes:
  airflow_postgres_data:
  dbt_config: 